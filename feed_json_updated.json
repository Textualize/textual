{"version": "https://jsonfeed.org/version/1", "title": "Textual", "home_page_url": "https://textual.textualize.io/", "feed_url": "https://textual.textualize.io/feed_json_updated.json", "description": null, "icon": null, "authors": [], "language": "en", "items": [{"id": "https://textual.textualize.io/blog/2025/05/07/the-future-of-textualize/", "url": "https://textual.textualize.io/blog/2025/05/07/the-future-of-textualize/", "title": "The future of Textualize", "content_html": "<p>Textual has come a <em>long</em> way since I figured why not build an application framework on top of <a href=\"https://github.com/Textualize/rich\">Rich</a>.</p>\n<p>Both were initially hobby projects. I mean look how much fun I was having back then:</p>", "image": null, "date_modified": "2025-05-14T16:42:04+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["News"]}, {"id": "https://textual.textualize.io/blog/2024/12/12/algorithms-for-high-performance-terminal-apps/", "url": "https://textual.textualize.io/blog/2024/12/12/algorithms-for-high-performance-terminal-apps/", "title": "Algorithms for high performance terminal apps", "content_html": "<p>I've had the fortune of being able to work fulltime on a FOSS project for the last three plus years.</p>\n<div style=\"width:250px;float:right;margin:10px;max-width:50%;\">\n<a href=\"https://github.com/textualize/textual-demo\">\n--8<-- \"docs/blog/images/textual-demo.svg\"\n</a>\n</div>\n\n<p>Textual has been a constant source of programming challenges.\nOften frustrating but never boring, the challenges arise because the terminal \"specification\" says nothing about how to build a modern User Interface.\nThe building blocks are there: after some effort you can move the cursor, write colored text, read keys and mouse movements, but that's about it.\nEverything else we had to build from scratch. From the most basic <a href=\"https://textual.textualize.io/widget_gallery/#button\">button</a> to a syntax highlighted <a href=\"https://textual.textualize.io/widget_gallery/#textarea\">TextArea</a>, and everything along the way.</p>\n<p>I wanted to write-up some of the solutions we came up with, and the 1.0 milestone we just passed makes this a perfect time.</p>", "image": null, "date_modified": "2025-04-26T12:45:46+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["Release"]}, {"id": "https://textual.textualize.io/blog/2025/02/16/smoother-scrolling-in-the-terminal-mdash-a-feature-decades-in-the-making/", "url": "https://textual.textualize.io/blog/2025/02/16/smoother-scrolling-in-the-terminal-mdash-a-feature-decades-in-the-making/", "title": "Smoother scrolling in the terminal &mdash; a feature decades in the making", "content_html": "<h1>Smoother scrolling in the terminal &mdash; a feature decades in the making</h1>\n<p>The great philosopher F. Bueller once said \u201cLife moves pretty fast. If you don't stop and look around once in a while, you could miss it.\u201d</p>\n<p>Beuller was <em>not</em> taking about terminals, which tend not to move very fast at all.\nUntil they do.\nFrom time to time terminals acquire new abilities after a long plateau.\nWe are now seeing a kind of punctuated evolution in terminals which makes things possible that just weren't feasible a short time ago.</p>\n<p>I want to talk about one such feature, which <em>I believe</em> has been decades[^1] in the making.\nTake a look at the following screen recording (taken from a TUI running in the terminal):</p>\n<p><img alt=\"A TUI Scrollbar\" src=\"../images/smooth-scroll/no-smooth-scroll.gif\"></p>", "image": null, "date_modified": "2025-02-16T12:06:48+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2024/04/20/behind-the-curtain-of-inline-terminal-applications/", "url": "https://textual.textualize.io/blog/2024/04/20/behind-the-curtain-of-inline-terminal-applications/", "title": "Behind the Curtain of Inline Terminal Applications", "content_html": "<h1>Behind the Curtain of Inline Terminal Applications</h1>\n<p>Textual recently added the ability to run <em>inline</em> terminal apps.\nYou can see this in action if you run the <a href=\"https://github.com/Textualize/textual/blob/main/examples/calculator.py\">calculator example</a>:</p>\n<p><img alt=\"Inline Calculator\" src=\"../images/calcinline.png\"></p>\n<p>The application appears directly under the prompt, rather than occupying the full height of the screen&mdash;which is more typical of TUI applications.\nYou can interact with this calculator using keys <em>or</em> the mouse.\nWhen you press ++ctrl+q++ the calculator disappears and returns you to the prompt.</p>\n<p>Here's another app that creates an inline code editor:</p>\n<p>=== \"Video\"</p>\n<pre><code>&lt;div class=\"video-wrapper\"&gt;\n    &lt;iframe width=\"852\" height=\"525\" src=\"https://www.youtube.com/embed/Dt70oSID1DY\" title=\"Inline app\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/div&gt;\n</code></pre>\n<p>=== \"inline.py\"\n    ```python \n    from textual.app import App, ComposeResult\n    from textual.widgets import TextArea</p>\n<pre><code>class InlineApp(App):\n    CSS = \"\"\"\n    TextArea {\n        height: auto;\n        max-height: 50vh;\n    }\n    \"\"\"\n\n    def compose(self) -&gt; ComposeResult:\n        yield TextArea(language=\"python\")\n\n\nif __name__ == \"__main__\":\n    InlineApp().run(inline=True)\n\n```\n</code></pre>\n<p>This post will cover some of what goes on under the hood to make such inline apps work.</p>\n<p>It's not going to go in to too much detail.\nI'm assuming most readers will be more interested in a birds-eye view rather than all the gory details.</p>", "image": null, "date_modified": "2024-12-06T11:28:56+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2023/09/21/textual-0380-adds-a-syntax-aware-textarea/", "url": "https://textual.textualize.io/blog/2023/09/21/textual-0380-adds-a-syntax-aware-textarea/", "title": "Textual 0.38.0 adds a syntax aware TextArea", "content_html": "<h1>Textual 0.38.0 adds a syntax aware TextArea</h1>\n<p>This is the second big feature release this month after last week's <a href=\"./release0.37.0.md\">command palette</a>.</p>", "image": null, "date_modified": "2024-10-24T17:22:54+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["Release"]}, {"id": "https://textual.textualize.io/blog/2024/09/15/anatomy-of-a-textual-user-interface/", "url": "https://textual.textualize.io/blog/2024/09/15/anatomy-of-a-textual-user-interface/", "title": "Anatomy of a Textual User Interface", "content_html": "<h1>Anatomy of a Textual User Interface</h1>\n<p>!!! note \"My bad \ud83e\udd26\"</p>\n<pre><code>The date is wrong on this post&amp;mdash;it was actually published on the 2nd of September 2024.\nI don't want to fix it, as that would break the URL.\n</code></pre>\n<p>I recently wrote a <a href=\"https://en.wikipedia.org/wiki/Text-based_user_interface\">TUI</a> to chat to an AI agent in the terminal.\nI'm not the first to do this (shout out to <a href=\"https://github.com/darrenburns/elia\">Elia</a> and <a href=\"https://github.com/villekr/paita\">Paita</a>), but I <em>may</em> be the first to have it reply as if it were the AI from the Aliens movies?</p>\n<p>Here's a video of it in action:</p>\n<iframe width=\"100%\" style=\"aspect-ratio:1512 / 982\"  src=\"https://www.youtube.com/embed/hr5JvQS4d_w\" title=\"Mother AI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>\n\n<p>Now let's dissect the code like Bishop dissects a facehugger.</p>", "image": null, "date_modified": "2024-09-08T12:17:42+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2024/09/08/towards-textual-web-applications/", "url": "https://textual.textualize.io/blog/2024/09/08/towards-textual-web-applications/", "title": "Towards Textual Web Applications", "content_html": "<p>In this post we'll look at some new functionality available in Textual apps accessed via a browser and how it helps provide a more equal experience across platforms.</p>", "image": null, "date_modified": "2024-09-08T12:17:42+00:00", "authors": [{"name": "darrenburns"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2024/02/11/file-magic-with-the-python-standard-library/", "url": "https://textual.textualize.io/blog/2024/02/11/file-magic-with-the-python-standard-library/", "title": "File magic with the Python standard library", "content_html": "<h1>File magic with the Python standard library</h1>\n<p>I recently published <a href=\"https://github.com/textualize/toolong\">Toolong</a>, an app for viewing log files.\nThere were some interesting technical challenges in building Toolong that I'd like to cover in this post.</p>", "image": null, "date_modified": "2024-03-03T13:32:04+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2024/02/20/remote-memory-profiling-with-memray/", "url": "https://textual.textualize.io/blog/2024/02/20/remote-memory-profiling-with-memray/", "title": "Remote memory profiling with Memray", "content_html": "<h1>Remote memory profiling with Memray</h1>\n<p><a href=\"https://github.com/bloomberg/memray\">Memray</a> is a memory profiler for Python, built by some very smart devs at Bloomberg.\nIt is a fantastic tool to identify memory leaks in your code or other libraries (down to the C level)!</p>\n<p>They recently added a <a href=\"https://github.com/textualize/textual/\">Textual</a> interface which looks amazing, and lets you monitor your process right from the terminal:</p>\n<p><img alt=\"Memray\" src=\"https://raw.githubusercontent.com/bloomberg/memray/main/docs/_static/images/live_animated.webp\"></p>", "image": null, "date_modified": "2024-02-20T15:54:07+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2023/10/04/announcing-textual-plotext/", "url": "https://textual.textualize.io/blog/2023/10/04/announcing-textual-plotext/", "title": "Announcing textual-plotext", "content_html": "<h1>Announcing textual-plotext</h1>\n<p>It's no surprise that a common question on the <a href=\"https://discord.gg/Enf6Z3qhVr\">Textual Discord\nserver</a> is how to go about producing plots in\nthe terminal. A popular solution that has been suggested is\n<a href=\"https://github.com/piccolomo/plotext\">Plotext</a>. While Plotext doesn't\ndirectly support Textual, it is <a href=\"https://github.com/piccolomo/plotext/blob/master/readme/environments.md#rich\">easy to use with\nRich</a>\nand, because of this, we wanted to make it just as easy to use in your\nTextual applications.</p>", "image": null, "date_modified": "2023-10-07T13:42:11+00:00", "authors": [{"name": "davep"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2023/09/18/things-i-learned-while-building-textuals-textarea/", "url": "https://textual.textualize.io/blog/2023/09/18/things-i-learned-while-building-textuals-textarea/", "title": "Things I learned while building Textual's TextArea", "content_html": "<h1>Things I learned building a text editor for the terminal</h1>\n<p><code>TextArea</code> is the latest widget to be added to Textual's <a href=\"https://textual.textualize.io/widget_gallery/\">growing collection</a>.\nIt provides a multi-line space to edit text, and features optional syntax highlighting for a selection of languages.</p>\n<p><img alt=\"text-area-welcome.gif\" src=\"../images/text-area-learnings/text-area-welcome.gif\"></p>\n<p>Adding a <code>TextArea</code> to your Textual app is as simple as adding this to your <code>compose</code> method:</p>\n<p><code>python\nyield TextArea()</code></p>\n<p>Enabling syntax highlighting for a language is as simple as:</p>\n<p><code>python\nyield TextArea(language=\"python\")</code></p>\n<p>Working on the <code>TextArea</code> widget for Textual taught me a lot about Python and my general\napproach to software engineering. It gave me an appreciation for the subtle functionality behind\nthe editors we use on a daily basis \u2014 features we may not even notice, despite\nsome engineer spending hours perfecting it to provide a small boost to our development experience.</p>\n<p>This post is a tour of some of these learnings.</p>", "image": null, "date_modified": "2023-09-23T14:06:20+00:00", "authors": [{"name": "darrenburns"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2023/09/15/textual-0370-adds-a-command-palette/", "url": "https://textual.textualize.io/blog/2023/09/15/textual-0370-adds-a-command-palette/", "title": "Textual 0.37.0 adds a command palette", "content_html": "<h1>Textual 0.37.0 adds a command palette</h1>\n<p>Textual version 0.37.0 has landed!\nThe highlight of this release is the new command palette.</p>", "image": null, "date_modified": "2023-09-15T17:01:09+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["Release"]}, {"id": "https://textual.textualize.io/blog/2023/09/06/what-is-textual-web/", "url": "https://textual.textualize.io/blog/2023/09/06/what-is-textual-web/", "title": "What is Textual Web?", "content_html": "<h1>What is Textual Web?</h1>\n<p>If you know us, you will know that we are the team behind <a href=\"https://github.com/Textualize/rich\">Rich</a> and <a href=\"https://github.com/Textualize/textual\">Textual</a> &mdash; two popular Python libraries that work magic in the terminal.</p>\n<p>!!! note</p>\n<pre><code>Not to mention [Rich-CLI](https://github.com/Textualize/rich-cli), [Trogon](https://github.com/Textualize/trogon), and [Frogmouth](https://github.com/Textualize/frogmouth)\n</code></pre>\n<p>Today we are adding one project more to that lineup: <a href=\"https://github.com/Textualize/textual-web\">textual-web</a>.</p>", "image": null, "date_modified": "2023-09-06T17:53:31+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["News"]}, {"id": "https://textual.textualize.io/blog/2023/07/29/pull-requests-are-cake-or-puppies/", "url": "https://textual.textualize.io/blog/2023/07/29/pull-requests-are-cake-or-puppies/", "title": "Pull Requests are cake or puppies", "content_html": "<h1>Pull Requests are cake or puppies</h1>\n<p>Broadly speaking, there are two types of contributions you can make to an Open Source project.</p>", "image": null, "date_modified": "2023-07-29T17:05:04+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2023/07/27/using-rich-inspect-to-interrogate-python-objects/", "url": "https://textual.textualize.io/blog/2023/07/27/using-rich-inspect-to-interrogate-python-objects/", "title": "Using Rich Inspect to interrogate Python objects", "content_html": "<h1>Using Rich Inspect to interrogate Python objects</h1>\n<p>The <a href=\"https://github.com/Textualize/rich\">Rich</a> library has a few functions that are admittedly a little out of scope for a terminal color library. One such function is <code>inspect</code> which is so useful you may want to <code>pip install rich</code> just for this feature.</p>", "image": null, "date_modified": "2023-07-27T12:34:46+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2023/07/17/textual-0300-adds-desktop-style-notifications/", "url": "https://textual.textualize.io/blog/2023/07/17/textual-0300-adds-desktop-style-notifications/", "title": "Textual 0.30.0 adds desktop-style notifications", "content_html": "<h1>Textual 0.30.0 adds desktop-style notifications</h1>\n<p>We have a new release of Textual to talk about, but before that I'd like to cover a little Textual news.</p>", "image": null, "date_modified": "2023-07-17T14:08:32+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["Release"]}, {"id": "https://textual.textualize.io/blog/2023/07/03/textual-0290-refactors-dev-tools/", "url": "https://textual.textualize.io/blog/2023/07/03/textual-0290-refactors-dev-tools/", "title": "Textual 0.29.0 refactors dev tools", "content_html": "<h1>Textual 0.29.0 refactors dev tools</h1>\n<p>It's been a slow week or two at Textualize, with Textual devs taking well-earned annual leave, but we still managed to get a new version out.</p>", "image": null, "date_modified": "2023-07-03T16:09:24+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["Release"]}, {"id": "https://textual.textualize.io/blog/2023/06/06/to-tui-or-not-to-tui/", "url": "https://textual.textualize.io/blog/2023/06/06/to-tui-or-not-to-tui/", "title": "To TUI or not to TUI", "content_html": "<h1>To TUI or not to TUI</h1>\n<p>Tech moves pretty fast.\nIf you don\u2019t stop and look around once in a while, you could miss it.\nAnd yet some technology feels like it has been around forever.</p>\n<p>Terminals are one of those forever-technologies.</p>", "image": null, "date_modified": "2023-06-05T17:51:19+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["DevLog"]}, {"id": "https://textual.textualize.io/blog/2023/06/01/textual-adds-sparklines-selection-list-input-validation-and-tool-tips/", "url": "https://textual.textualize.io/blog/2023/06/01/textual-adds-sparklines-selection-list-input-validation-and-tool-tips/", "title": "Textual adds Sparklines, Selection list, Input validation, and tool tips", "content_html": "<h1>Textual adds Sparklines, Selection list, Input validation, and tool tips</h1>\n<p>It's been 12 days since the last Textual release, which is longer than our usual release cycle of a week.</p>\n<p>We've been a little distracted with our \"dogfood\" projects: <a href=\"https://github.com/Textualize/frogmouth\">Frogmouth</a> and <a href=\"https://github.com/Textualize/trogon\">Trogon</a>. Both of which hit 1000 Github stars in 24 hours. We will be maintaining / updating those, but it is business as usual for this Textual release (and it's a big one). We have such sights to show you.</p>", "image": null, "date_modified": "2023-06-01T17:41:08+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["Release"]}, {"id": "https://textual.textualize.io/blog/2023/05/08/textual-0240-adds-a-select-control/", "url": "https://textual.textualize.io/blog/2023/05/08/textual-0240-adds-a-select-control/", "title": "Textual 0.24.0 adds a Select control", "content_html": "<h1>Textual 0.24.0 adds a Select control</h1>\n<p>Coming just 5 days after the last release, we have version 0.24.0 which we are crowning the King of Textual releases.\nAt least until it is deposed by version 0.25.0.</p>", "image": null, "date_modified": "2023-06-01T11:33:54+00:00", "authors": [{"name": "willmcgugan"}], "tags": ["Release"]}]}